from telebot import TeleBot, types
from rest_framework.response import Response
from rest_framework.views import APIView
import telebot
from django.conf import settings
from bot.models import People
from telebot import types
from string import Template
from .button import (
    gen_markup_ok,
    gen_markup_main,
    gen_markup_work,
    gen_markup_number,
    gen_markup_place,
    gen_markup_submenu,
    gen_raion,
    get_place,
    get_work,
    get_raion,
    gen_category
)


bot = telebot.TeleBot(settings.TOKEN)
  
links = {"–ì–ª–∞–≤–∞ –ú–°–£":"https://t.me/joinchat/Pug4_9U3A403ZTY6",
"–ú—ç—Ä –≥–æ—Ä–æ–¥–∞":"https://t.me/joinchat/bAhpq76qt0AyYTky",
"–î–µ–ø—É—Ç–∞—Ç –∞–π—ã–ª–Ω–æ–≥–æ –∫–µ–Ω–µ—à–∞":"https://t.me/joinchat/uhr3HwTpvXo3NzBi",
"–î–µ–ø—É—Ç–∞—Ç –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –∫–µ–Ω–µ—à–∞":"https://t.me/joinchat/q-XXDpdckdRkODNi",
"–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π —Å–ª—É–∂–∞—â–∏–π":"https://t.me/joinchat/hQ25EcquKttlMGJi",
"–ù–∞—á–∞–ª—å–Ω–∏–∫ –§–≠–û –∞–π—ã–ª –æ–∫–º–æ—Ç—É/–º—ç—Ä–∏–∏":"https://t.me/joinchat/O5Gb9mwAczM4NTA6"}

class UpdateBot(APIView):
    def post(self, request,):
        # –°—é–¥–∞ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –∏ –¥–∞–ª–µ–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º
        json_str = request.body.decode('UTF-8')
        update = types.Update.de_json(json_str)
        bot.process_new_updates([update])
 
        return Response({'code': 200})



user_dict = {}

class User:
    
    def __init__(self, fullname):
        self.fullname = fullname
        keys = ['place','raion','phone','doljnost','city','kenesh']
        for key in keys:
            self.key = None


# –µ—Å–ª–∏ /help, /start
@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    
    bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ "
    + message.from_user.first_name
    + ", —è –±–æ—Ç, —á—Ç–æ–±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?", reply_markup=gen_markup_main())
    bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            

# /about
@bot.message_handler(commands=['about'])
def send_about(message):

    bot.send_message(message.chat.id, "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É , –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å")
    

# /register
@bot.message_handler(commands=["register"])
def user_reg(message):
    if People.objects.filter(p_id=message.chat.id).exists():
        msg = bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')
    else:
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(message.chat.id, '–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–≤–æ–¥–∏—Ç–µ –≤–∞—à–∏ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–∞–º')
        msg = bot.send_message(message.chat.id, '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ',reply_markup=markup)
        
        bot.register_next_step_handler(msg, process_fullname_step)
       
def process_fullname_step(message):
    try:
        chat_id = message.chat.id
        user_dict[chat_id] = People(p_id=chat_id,name=message.text)
    
        msg = bot.send_message(chat_id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',reply_markup=gen_markup_number())
        bot.register_next_step_handler(msg, process_phone_step)

    except Exception as e:
        print(e)
        bot.reply_to(message, 'üî† –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç')
        msg = bot.send_message(message.chat.id, '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ')
        bot.register_next_step_handler(msg, process_fullname_step)
        
def process_phone_step(message):
    try:
        if message.text == 'üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            bot.send_message(message.chat.id, message.from_user.first_name+" –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",reply_markup=gen_markup_main())
        else:

            chat_id = message.chat.id
            user = user_dict[chat_id]
            user.telephone = message.contact.phone_number
            
            msg = bot.send_message(chat_id, '–ó–∞–Ω–∏–º–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å',reply_markup=gen_markup_work())
            bot.register_next_step_handler(msg, process_work_step)
                
    except Exception as e:
        print(e)
        msg = bot.reply_to(message, '–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
        msg = bot.send_message(chat_id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \'–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω\'',reply_markup=gen_markup_number())
        bot.register_next_step_handler(msg, process_phone_step)

def process_work_step(message):
    try:
        if message.text == 'üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            bot.send_message(message.chat.id, message.from_user.first_name+" –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",reply_markup=gen_markup_main())
        else:
            chat_id = message.chat.id
            user = user_dict[chat_id]
            user.doljnost = get_work(message.text) 
            
            # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.ReplyKeyboardRemove(selective=False)

            msg = bot.send_message(chat_id, '–û–±–ª–∞—Å—Ç—å',reply_markup=gen_markup_place())
            bot.register_next_step_handler(msg, process_place_step)

    except Exception as e:
        bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ')
        msg = bot.send_message(chat_id, '–ó–∞–Ω–∏–º–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å',reply_markup=gen_markup_work())
        bot.register_next_step_handler(msg, process_work_step)
        
def process_place_step(message):
    try:
        if message.text == 'üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            bot.send_message(message.chat.id, message.from_user.first_name+" –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",reply_markup=gen_markup_main())
        else:
            chat_id = message.chat.id
            user = user_dict[chat_id]
            user.oblast = get_place(message.text)

            msg = bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',reply_markup=gen_category())
            bot.register_next_step_handler(msg, process_city_or_raion)

    except Exception as e:
        bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ')
        msg = bot.send_message(chat_id, '–û–±–ª–∞—Å—Ç—å',reply_markup=gen_markup_place())
        bot.register_next_step_handler(msg, process_place_step)

def process_city_or_raion(message):
    try:
        if message.text == 'üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            bot.send_message(message.chat.id, message.from_user.first_name+" –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",reply_markup=gen_markup_main())
        else:
            chat_id = message.chat.id
            user = user_dict[chat_id]
            oblast = user.oblast          
            
            msg = bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã',reply_markup=gen_raion(oblast, message.text))
            if message.text == '–ì–æ—Ä–æ–¥':
                bot.register_next_step_handler(msg, process_save_city_or_obl)
            elif message.text == '–†–∞–π–æ–Ω':
                bot.register_next_step_handler(msg, process_kenesh)

    except Exception as e:
        print(e)
        bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ')
        msg = bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',reply_markup=gen_category())
        bot.register_next_step_handler(msg, process_save_city_or_obl)

def process_kenesh(message):
    try:
        if message.text == 'üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            bot.send_message(message.chat.id, message.from_user.first_name+" –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",reply_markup=gen_markup_main())
        else:
            chat_id = message.chat.id
            user = user_dict[chat_id]
            user.kenesh = message.text
            user.save()
            
        # –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        bot.send_message(chat_id, getRegData(user, ' –í–∞—à–∞ –∑–∞—è–≤–∫–∞', message.from_user.first_name), parse_mode="Markdown",reply_markup=gen_markup_main())
        
        # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É
        try:
            bot.send_message(settings.CHAT_ID, getRegData(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username), parse_mode="Markdown",reply_markup=gen_markup_ok())
        except Exception as e:
            print(e)
                
    except Exception as e:
        print(e)
        bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ')
        msg = bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',reply_markup=gen_category())
        bot.register_next_step_handler(msg, process_city_or_raion)
        
def process_save_city_or_obl(message):
    try:
        if message.text == 'üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            bot.send_message(message.chat.id, message.from_user.first_name+" –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",reply_markup=gen_markup_main())
        else:
            chat_id = message.chat.id
            user = user_dict[chat_id]
            user.city = message.text
            user.raion = message.text
            user.save()
            
        # –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        bot.send_message(chat_id, getRegData(user, ' –í–∞—à–∞ –∑–∞—è–≤–∫–∞', message.from_user.first_name), parse_mode="Markdown",reply_markup=gen_markup_main())
        
        # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É
        try:
            bot.send_message(settings.CHAT_ID, getRegData(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username), parse_mode="Markdown",reply_markup=gen_markup_ok())
        except Exception as e:
            print(e)
                
    except Exception as e:
        print(e)
        bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ')
        msg = bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',reply_markup=gen_category())
        bot.register_next_step_handler(msg, process_city_or_raion)
        


# —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤–∏–¥ –∑–∞—è–≤–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
# –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ Template
# –≤ send_message –¥–æ–ª–∂–Ω–æ —Å—Ç–æ—è—Ç—å parse_mode="Markdown"
def getRegData(user, title, name):
    t = Template('$title *$name* \n –§–ò–û: *$fullname* \n –¢–µ–ª–µ—Ñ–æ–Ω: *$phone* \n –†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: *$doljnost* \n –ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: *$place* \n –ì–æ—Ä–æ–¥: *$city* \n –†–∞–π–æ–Ω : *$raion* \n –ö–µ–Ω–µ—à : *$kenesh* \n ID: *$p_id*')

    return t.substitute({
        'title': title,
        'p_id':user.p_id,
        'name': name,
        'fullname': user.name,
        'phone': user.telephone ,
        'doljnost': user.doljnost,
        'place':user.oblast,
        'city':user.city,
        'raion':user.raion,
        'kenesh':user.kenesh
    })

# –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
@bot.message_handler(content_types=["text"])
def send_help(message):
    if message.text=='üìú –û –±–æ—Ç–µ':
        send_about(message)    
    elif message.text=='üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
        user_reg(message)
    elif message.text=='üè° –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
        bot.send_message(message.chat.id, message.from_user.first_name+" –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",reply_markup=gen_markup_main())
    else:
        bot.send_message(message.chat.id, '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É , –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å',reply_markup=gen_markup_main())
        

        
# –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ
@bot.message_handler(content_types=["photo"])
def send_help_text(message):
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç')
    

@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    if call.data == 'yes':
        person = People.objects.get(p_id=call.message.text.split("ID:",1)[1].strip())
        person.sale = True
        person.save()
        bot.send_message(person.p_id,'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É :'+links[person.doljnost])
    elif call.data == 'no':
        person = People.objects.get(p_id=call.message.text.split("ID:",1)[1].strip())
        bot.send_message(person.p_id,'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')
        person.delete()

# Enable saving next step handlers to file "./.handlers-saves/step.save".
# Delay=2 means that after any change in next step handlers (e.g. calling register_next_step_handler())
# saving will hapen after delay 2 seconds.
bot.enable_save_next_step_handlers(delay=2)

# Load next_step_handlers from save file (default "./.handlers-saves/step.save")
# WARNING It will work only if enable_save_next_step_handlers was called!
bot.load_next_step_handlers()

