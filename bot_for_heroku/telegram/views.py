from telebot import TeleBot, types
from rest_framework.response import Response
from rest_framework.views import APIView
import telebot
from telebot import types
from django.conf import settings
from bot.models import People
from telebot import types
from string import Template
from .button import (
    gen_markup_ok,
    gen_markup_main,
    gen_markup_work,
    gen_markup_number,
    gen_markup_place,
    gen_raion,
    get_place,
    get_work,
    get_kenesh,
    gen_category,
    get_city,
    admin_panel,
    chose_who,
    gen_kanal
)


bot = telebot.TeleBot(settings.TOKEN)
  
links = {"–ñ”®–ë –±–∞—à—á—ã—Å—ã":"https://t.me/joinchat/Pug4_9U3A403ZTY6",
"–®–∞–∞—Ä–¥—ã–Ω –º—ç—Ä–∏":"https://t.me/joinchat/bAhpq76qt0AyYTky",
"–ê–π—ã–ª–¥—ã–∫ –∫–µ“£–µ—à—Ç–∏–Ω –¥–µ–ø—É—Ç–∞—Ç—ã":"https://t.me/joinchat/uhr3HwTpvXo3NzBi",
"–®–∞–∞—Ä–¥—ã–∫ –∫–µ“£–µ—à—Ç–∏–Ω –¥–µ–ø—É—Ç–∞—Ç—ã":"https://t.me/joinchat/q-XXDpdckdRkODNi",
"–ú—É–Ω–∏—Ü–∏–ø–∞–ª–¥—ã–∫ –∫—ã–∑–º–∞—Ç–∫–µ—Ä":"https://t.me/joinchat/hQ25EcquKttlMGJi",
"–§–≠–û –∞–π—ã–ª ”©–∫–º”©—Ç“Ø–Ω“Ø–Ω –±–∞—à—á—ã—Å—ã / –º—ç—Ä–∏—è":"https://t.me/joinchat/O5Gb9mwAczM4NTA6",
"”®–Ω”©–∫—Ç”©—à":"https://t.me/msu_union_info",
"–≠–∫—Å–ø–µ—Ä—Ç—Ç–µ—Ä":"https://t.me/msu_union_info",
"–ñ–û–ë –°–æ—é–∑—É–Ω—É–Ω –æ–∫—É–ª—É":"https://t.me/msu_union_info"}

class UpdateBot(APIView):
    def post(self, request,):
        # –°—é–¥–∞ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –∏ –¥–∞–ª–µ–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º
        json_str = request.body.decode('UTF-8')
        update = types.Update.de_json(json_str)
        bot.process_new_updates([update])
 
        return Response({'code': 200})



user_dict = {}
distribut_dict = {}

class User:
    
    def __init__(self, fullname):
        self.fullname = fullname
        keys = ['place','raion','phone','doljnost','city','kenesh']
        for key in keys:
            self.key = None

class Distribution:
    
    def __init__(self, method):
        self.method = method
        keys = ['docum','whome','doljnost','oblast','text']
        for key in keys:
            self.key = None


# –µ—Å–ª–∏ /help, /start
@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "–°–∞–ª–∞–º–∞—Ç—Å—ã–∑–±—ã "
    + message.from_user.first_name
    + ", –º–µ–Ω –±–æ—Ç–º—É–Ω, —ç–º–Ω–µ–Ω–∏ –±–∏–ª–≥–∏“£–∏–∑ –∫–µ–ª–µ—Ç?", reply_markup=gen_markup_main())

    bot.send_message(message.chat.id, "–ë–∞—Ä–¥—ã–∫ –æ–∫—É—è–ª–∞—Ä–¥–∞–Ω –∫–∞–±–∞—Ä–¥–∞—Ä –±–æ–ª—É–ø —Ç—É—Ä—É—É “Ø—á“Ø–Ω –±–∏–∑–¥–∏–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ã–±—ã–∑–≥–∞ ”©—Ç“Ø“£“Ø–∑"
    , reply_markup=gen_kanal())

    bot.send_message(message.chat.id, "https://www.youtube.com/watch?v=knpNbLKO0QA"
    , reply_markup=gen_kanal())

    bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            

# /about
@bot.message_handler(commands=['about'])
def send_about(message):

    bot.send_message(message.chat.id,"–ë—É–ª –±–æ—Ç —Å–∏–∑–≥–µ –∫–∞—Ç—Ç–æ–æ–≥–æ –∫–∏—Ä“Ø“Ø–≥”© –∂–∞—Ä–¥–∞–º –±–µ—Ä–∏–ø, —Ç–æ–ø–∫–æ –∫–æ—à—É–ª—É—É “Ø—á“Ø–Ω —à–∏–ª—Ç–µ–º–µ–Ω–∏ –∂”©–Ω”©—Ç”©—Ç.")
    

# /admin
@bot.message_handler(commands=['admin'])
def send_admin(message):
    bot.send_message(settings.CHAT_ID,"–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤–∞—à–µ–≥–æ –±–æ—Ç–∞",reply_markup=admin_panel())
  

# /register
@bot.message_handler(commands=["register"])
def user_reg(message):
    if People.objects.filter(p_id=message.chat.id).exists():
        msg = bot.send_message(message.chat.id, '–°–∏–∑ –±—É–≥–∞ —á–µ–π–∏–Ω –∫–∞—Ç—Ç–∞–ª–≥–∞–Ω—Å—ã–∑.')
    else:
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(message.chat.id, '–£—Ä–º–∞—Ç—Ç—É—É –∫–æ–ª–¥–æ–Ω—É—É—á—É, ”©–∑“Ø“£“Ø–∑–¥“Ø–Ω –º–∞–∞–ª—ã–º–∞—Ç—ã“£—ã–∑–¥—ã —Ç—É—É—Ä–∞ –∫–∏—Ä–≥–∏–∑–∏“£–∏–∑.–ë–æ–ª–±–æ—Å–æ, —Å–∏–∑–¥–∏–Ω –∞—Ä—ã–∑—ã“£—ã–∑ –∫–∞—Ä–∞–ª–±–∞–π—Ç –∂–∞–Ω–∞ —Å–∏–∑ –ö–† –ñ”®–ë –°–æ—é–∑—É–Ω—É–Ω —Ç–æ–ø—Ç–æ—Ä—É–Ω–∞ –∫–æ—à—É–ª–∞ –∞–ª–±–∞–π—Å—ã–∑.')
        msg = bot.send_message(message.chat.id, '–§–∞–º–∏–ª–∏—è—Å—ã –ê—Ç—ã –ê—Ç–∞—Å—ã–Ω—ã–Ω –∞—Ç—ã.',reply_markup=markup)
        
        bot.register_next_step_handler(msg, process_fullname_step)
       
def process_fullname_step(message):
    try:
        chat_id = message.chat.id
        user_dict[chat_id] = People(p_id=chat_id,name=message.text)
    
        msg = bot.send_message(chat_id, '\"–¢–µ–ª–µ—Ñ–æ–Ω –∂”©–Ω”©—Ç“Ø“Ø\" –±–∞—Å–∫—ã—á—ã–Ω –±–∞—Å—ã“£—ã–∑.',reply_markup=gen_markup_number())
        bot.register_next_step_handler(msg, process_phone_step)

    except Exception as e:
        print(e)
        bot.reply_to(message, 'üî† –¢–µ–∫—Å—Ç –∫–∏—Ä–≥–∏–∑–∏“£–∏–∑')
        msg = bot.send_message(message.chat.id, '–§–∞–º–∏–ª–∏—è—Å—ã –ê—Ç—ã –ê—Ç–∞—Å—ã–Ω—ã–Ω –∞—Ç—ã.')
        bot.register_next_step_handler(msg, process_fullname_step)
        
def process_phone_step(message):
    try:
        if message.text == 'üè° –ë–∞—à–∫—ã –º–µ–Ω—é':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            bot.send_message(message.chat.id, message.from_user.first_name+" –∫–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑",reply_markup=gen_markup_main())
        else:

            chat_id = message.chat.id
            user = user_dict[chat_id]
            user.telephone = message.contact.phone_number
            
            msg = bot.send_message(chat_id, '–≠—ç–ª–µ–≥–µ–Ω –∫—ã–∑–º–∞—Ç—ã',reply_markup=gen_markup_work())
            bot.register_next_step_handler(msg, process_work_step)
                
    except Exception as e:
        print(e)
        msg = bot.reply_to(message, '–°–∏–∑ –±–∞—à–∫–∞–±–∏—Ä –Ω–µ—Ä—Å–µ–Ω–∏ –∫–∏—Ä–≥–∏–∑–¥–∏“£–∏–∑. –°—É—Ä–∞–Ω—ã—á,—Ç–µ–ª–µ—Ñ–æ–Ω  –Ω–æ–º–µ—Ä–∏–Ω –∫–∏—Ä–≥–∏–∑–∏“£–∏–∑.')
        msg = bot.send_message(chat_id, '\"–¢–µ–ª–µ—Ñ–æ–Ω –∂”©–Ω”©—Ç“Ø“Ø\" –±–∞—Å–∫—ã—á—ã–Ω –±–∞—Å—ã“£—ã–∑.',reply_markup=gen_markup_number())
        bot.register_next_step_handler(msg, process_phone_step)

def process_work_step(message):
    try:
        if message.text == 'üè° –ë–∞—à–∫—ã –º–µ–Ω—é':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            bot.send_message(message.chat.id, message.from_user.first_name+" –∫–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑",reply_markup=gen_markup_main())
        else:
            chat_id = message.chat.id
            user = user_dict[chat_id]
            user.doljnost = get_work(message.text) 
            
            # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.ReplyKeyboardRemove(selective=False)

            msg = bot.send_message(chat_id, '–û–±–ª–∞—Å—Ç',reply_markup=gen_markup_place())
            bot.register_next_step_handler(msg, process_place_step)

    except Exception as e:
        bot.reply_to(message, '–°—É—Ä–∞–Ω—ã—á, –∞—Å—Ç—ã–Ω–¥–∞–≥—ã —Ç–∏–∑–º–µ–¥–µ–Ω —Ç–∞–Ω–¥–∞“£—ã–∑')
        msg = bot.send_message(chat_id, '–≠—ç–ª–µ–≥–µ–Ω –∫—ã–∑–º–∞—Ç—ã',reply_markup=gen_markup_work())
        bot.register_next_step_handler(msg, process_work_step)
        
def process_place_step(message):
    try:
        if message.text == 'üè° –ë–∞—à–∫—ã –º–µ–Ω—é':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            bot.send_message(message.chat.id, message.from_user.first_name+" –∫–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑",reply_markup=gen_markup_main())
        else:
            chat_id = message.chat.id
            user = user_dict[chat_id]
            user.oblast = get_place(message.text)

            msg = bot.send_message(chat_id, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑',reply_markup=gen_category())
            bot.register_next_step_handler(msg, process_city_or_raion)

    except Exception as e:
        bot.reply_to(message, '–°—É—Ä–∞–Ω—ã—á, –∞—Å—Ç—ã–Ω–¥–∞–≥—ã —Ç–∏–∑–º–µ–¥–µ–Ω —Ç–∞–Ω–¥–∞“£—ã–∑')
        msg = bot.send_message(chat_id, '–û–±–ª–∞—Å—Ç',reply_markup=gen_markup_place())
        bot.register_next_step_handler(msg, process_place_step)

def process_city_or_raion(message):
    try:
        if message.text == 'üè° –ë–∞—à–∫—ã –º–µ–Ω—é':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            bot.send_message(message.chat.id, message.from_user.first_name+" –∫–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑",reply_markup=gen_markup_main())
        else:
            chat_id = message.chat.id
            user = user_dict[chat_id]
            oblast = user.oblast          
            
            if message.text == '–®–∞–∞—Ä':
                msg = bot.send_message(chat_id, '–®–∞–∞—Ä —Ç–∞–Ω–¥–∞“£—ã–∑',reply_markup=get_city(oblast))
                bot.register_next_step_handler(msg, process_save_city_or_obl)
            elif message.text == '–†–∞–π–æ–Ω':
                msg = bot.send_message(chat_id, '–†–∞–π–æ–Ω —Ç–∞–Ω–¥–∞“£—ã–∑',reply_markup=gen_raion(oblast))
                bot.register_next_step_handler(msg, process_raion)

    except Exception as e:
        print(e)
        bot.reply_to(message, '–°—É—Ä–∞–Ω—ã—á, –∞—Å—Ç—ã–Ω–¥–∞–≥—ã —Ç–∏–∑–º–µ–¥–µ–Ω —Ç–∞–Ω–¥–∞“£—ã–∑')
        msg = bot.send_message(chat_id, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑',reply_markup=gen_category())
        bot.register_next_step_handler(msg, process_city_or_raion)

def process_raion(message):
    try:
        if message.text == 'üè° –ë–∞—à–∫—ã –º–µ–Ω—é':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            bot.send_message(message.chat.id, message.from_user.first_name+" –∫–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑",reply_markup=gen_markup_main())
        else:
            chat_id = message.chat.id
            user = user_dict[chat_id]
            user.raion = message.text

            msg = bot.send_message(chat_id, '–ú—ç—Ä–∏—è / –∞–π—ã–ª ”©–∫–º”©—Ç—Ç“Ø —Ç–∞–Ω–¥–∞“£—ã–∑:',reply_markup=get_kenesh(message.text))
            bot.register_next_step_handler(msg, process_kenesh)
            
    except Exception as e:
        print(e)
        bot.reply_to(message, '–°—É—Ä–∞–Ω—ã—á, –∞—Å—Ç—ã–Ω–¥–∞–≥—ã —Ç–∏–∑–º–µ–¥–µ–Ω —Ç–∞–Ω–¥–∞“£—ã–∑')
        msg = bot.send_message(chat_id, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑',reply_markup=gen_category())
        bot.register_next_step_handler(msg, process_city_or_raion)

def process_kenesh(message):
    try:
        if message.text == 'üè° –ë–∞—à–∫—ã –º–µ–Ω—é':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            bot.send_message(message.chat.id, message.from_user.first_name+" –∫–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑",reply_markup=gen_markup_main())
        else:
            chat_id = message.chat.id
            user = user_dict[chat_id]
            user.kenesh = message.text
            user.save()
            
        # –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        bot.send_message(chat_id, getRegData(user, ' –°–∏–∑–¥–∏–Ω –æ—Ç“Ø–Ω–º”©', message.from_user.first_name), parse_mode="Markdown",reply_markup=gen_markup_main())
        
        # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É
        try:
            bot.send_message(settings.CHAT_ID, getRegData(user, '–ë–æ—Ç—Ç–æ–Ω –æ—Ç“Ø–º', bot.get_me().username), parse_mode="Markdown",reply_markup=gen_markup_ok())
        except Exception as e:
            print(e)
                
    except Exception as e:
        print(e)
        bot.reply_to(message, '–°—É—Ä–∞–Ω—ã—á, –∞—Å—Ç—ã–Ω–¥–∞–≥—ã —Ç–∏–∑–º–µ–¥–µ–Ω —Ç–∞–Ω–¥–∞“£—ã–∑')
        msg = bot.send_message(chat_id, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑',reply_markup=gen_category())
        bot.register_next_step_handler(msg, process_city_or_raion)
        
def process_save_city_or_obl(message):
    try:
        if message.text == 'üè° –ë–∞—à–∫—ã –º–µ–Ω—é' or message.text == 'üìù –°–±—Ä–æ—Å–∏—Ç—å':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            bot.send_message(message.chat.id, message.from_user.first_name+" –∫–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑",reply_markup=gen_markup_main())
        else:
            chat_id = message.chat.id
            user = user_dict[chat_id]
            user.city = message.text
            user.save()
            
        # –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        bot.send_message(chat_id, getRegData(user, ' –°–∏–∑–¥–∏–Ω –æ—Ç“Ø–Ω–º”©', message.from_user.first_name), parse_mode="Markdown",reply_markup=gen_markup_main())
        
        # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É
        try:
            bot.send_message(settings.CHAT_ID, getRegData(user, '–ë–æ—Ç—Ç–æ–Ω –æ—Ç“Ø–º', bot.get_me().username), parse_mode="Markdown",reply_markup=gen_markup_ok())
        except Exception as e:
            print(e)
                
    except Exception as e:
        print(e)
        bot.reply_to(message, '–°—É—Ä–∞–Ω—ã—á, –∞—Å—Ç—ã–Ω–¥–∞–≥—ã —Ç–∏–∑–º–µ–¥–µ–Ω —Ç–∞–Ω–¥–∞“£—ã–∑')
        msg = bot.send_message(chat_id, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑',reply_markup=gen_category())
        bot.register_next_step_handler(msg, process_city_or_raion)
        


# —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤–∏–¥ –∑–∞—è–≤–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
# –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ Template
# –≤ send_message –¥–æ–ª–∂–Ω–æ —Å—Ç–æ—è—Ç—å parse_mode="Markdown"
def getRegData(user, title, name):
    t = Template('$title *$name* \n –§–ò–û: *$fullname* \n –¢–µ–ª–µ—Ñ–æ–Ω: *$phone* \n –ö–µ—Å–∏–±–∏: *$doljnost* \n –ñ–∞—à–∞–≥–∞–Ω –∂–µ—Ä–∏: *$place* \n –®–∞–∞—Ä: *$city* \n –†–∞–π–æ–Ω : *$raion* \n –ú—ç—Ä–∏—è / –∞–π—ã–ª ”©–∫–º”©—Ç“Ø: : *$kenesh* \n ID: *$p_id*')

    return t.substitute({
        'title': title,
        'p_id':user.p_id,
        'name': name,
        'fullname': user.name,
        'phone': user.telephone ,
        'doljnost': user.doljnost,
        'place':user.oblast,
        'city':user.city,
        'raion':user.raion,
        'kenesh':user.kenesh
    })

# –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
@bot.message_handler(content_types=["text"])
def send_help(message):
    if message.text=='üìú –ë–æ—Ç –∂”©–Ω“Ø–Ω–¥”©':
        send_about(message)    
    elif message.text=='üìù –ö–∞—Ç—Ç–æ–æ–≥–æ –∫–∏—Ä–≥–∏–∑“Ø“Ø':
        user_reg(message)
    elif message.text=='üè° –ë–∞—à–∫—ã –º–µ–Ω—é':
        bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
        bot.send_message(message.chat.id, message.from_user.first_name+" –∫–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑",reply_markup=gen_markup_main())
    else:
        bot.send_message(message.chat.id, '–ë—É–ª –±–æ—Ç —Å–∏–∑–≥–µ –∫–∞—Ç—Ç–æ–æ–≥–æ –∫–∏—Ä“Ø“Ø–≥”© –∂–∞—Ä–¥–∞–º –±–µ—Ä–∏–ø, —Ç–æ–ø–∫–æ –∫–æ—à—É–ª—É—É “Ø—á“Ø–Ω —à–∏–ª—Ç–µ–º–µ–Ω–∏ –∂”©–Ω”©—Ç”©—Ç',reply_markup=gen_markup_main())
        

def add_text(message):
    try:
        if message.text == 'üè° –ë–∞—à–∫—ã –º–µ–Ω—é' or message.text == 'üìù –ë–∞—à—ã–Ω–∞–Ω –±–∞—à—Ç–æ–æ':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            bot.send_message(message.chat.id, message.from_user.first_name+" –∫–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑",reply_markup=gen_markup_main())
        else:
            chat_id = message.chat.id
            
            distribution = distribut_dict[chat_id]
            distribution.text = message.text
            if distribution.method == 'doc':
                msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
                bot.register_next_step_handler(msg,docum_send)
            elif distribution.method == 'img':
                msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
                bot.register_next_step_handler(msg,photo_send)
            elif distribution.method == 'text':
                msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å",reply_markup=chose_who())
                bot.register_next_step_handler(msg, choose_whome)

    except Exception as e:
        print(e)
        msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏')
        bot.register_next_step_handler(msg, add_text)
        
def docum_send(message):
    try:
        if message.text == 'üè° –ë–∞—à–∫—ã –º–µ–Ω—é' or message.text == 'üìù –ë–∞—à—ã–Ω–∞–Ω –±–∞—à—Ç–æ–æ':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            bot.send_message(message.chat.id, message.from_user.first_name+" –∫–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑",reply_markup=gen_markup_main())
        else:
            chat_id = message.chat.id
            distribution = distribut_dict[chat_id]
           
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            src = 'C:/Users/Lenovo/itrun/msu_bot/bot_for_heroku/telegram/distribution/' + message.document.file_name;
            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)

            distribution.docum = downloaded_file

            msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å",reply_markup=chose_who())
            bot.register_next_step_handler(msg, choose_whome)

    except Exception as e:
        print(e)
        msg = bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
        bot.register_next_step_handler(msg, docum_send)

def photo_send(message):
    try:
        if message.text == 'üè° –ë–∞—à–∫—ã –º–µ–Ω—é' or message.text == 'üìù –ë–∞—à—ã–Ω–∞–Ω –±–∞—à—Ç–æ–æ':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            bot.send_message(message.chat.id, message.from_user.first_name+" –∫–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑",reply_markup=gen_markup_main())
        else:
            chat_id = message.chat.id
            distribution = distribut_dict[chat_id]
            
            distribution.docum = message.photo[0].file_id
            
            msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å",reply_markup=chose_who())
            bot.register_next_step_handler(msg, choose_whome)

    except Exception as e:
        print(e)
        msg = bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
        bot.register_next_step_handler(msg, docum_send)



def choose_whome(message):
    try:
        if message.text == 'üè° –ë–∞—à–∫—ã –º–µ–Ω—é' or message.text == 'üìù –ë–∞—à—ã–Ω–∞–Ω –±–∞—à—Ç–æ–æ':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            bot.send_message(message.chat.id, message.from_user.first_name+" –∫–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑",reply_markup=gen_markup_main())
        else:
            chat_id = message.chat.id

            distribution = distribut_dict[chat_id]
            distribution.whome = message.text

            if distribution.whome == '–í—ã–±—Ä–∞—Ç—å –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º':
                msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å",reply_markup=gen_markup_work())
                bot.register_next_step_handler(msg,send_dist)

            elif distribution.whome == '–í—ã–±—Ä–∞—Ç—å –ø–æ –æ–±–ª–∞—Å—Ç—è–º':
                msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å",reply_markup=gen_markup_place())
                bot.register_next_step_handler(msg,send_dist)

    except Exception as e:
        print(e)
        msg = bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å')
        bot.register_next_step_handler(msg, choose_whome)

def send_dist(message):
    try:
        if message.text == 'üè° –ë–∞—à–∫—ã –º–µ–Ω—é' or message.text == 'üìù –ë–∞—à—ã–Ω–∞–Ω –±–∞—à—Ç–æ–æ':
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
            bot.send_message(message.chat.id, message.from_user.first_name+" –∫–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑",reply_markup=gen_markup_main())
        else:
            chat_id = message.chat.id
            distribution = distribut_dict[chat_id]
            if distribution.whome == '–í—ã–±—Ä–∞—Ç—å –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º':
                users = People.objects.filter(doljnost=get_work(message.text))
            elif distribution.whome == '–í—ã–±—Ä–∞—Ç—å –ø–æ –æ–±–ª–∞—Å—Ç—è–º':
                users = People.objects.filter(oblast=message.text)
            for user in users:
                try:
                    if distribution.method == 'doc':
                        bot.send_message(user.p_id,distribution.text)
                        bot.send_document(user.p_id, distribution.docum,parse_mode="Markdown")
                    elif distribution.method == 'img':
                        bot.send_message(user.p_id,distribution.text)
                        bot.send_photo(user.p_id, photo=distribution.docum, caption=message.caption)
                    elif distribution.method == 'text':
                        bot.send_message(user.p_id,distribution.text)
                       
                except Exception as e:
                    continue
        bot.send_message(settings.CHAT_ID, "–†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –≤—ã–±—Ä–∞–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",reply_markup=gen_markup_main())

            
    except Exception as e:
        print(e)
        msg = bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å')
        bot.register_next_step_handler(msg, choose_whome)
        
    
@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    try:
        if call.data == 'yes':
            person = People.objects.get(p_id=call.message.text.split("ID:",1)[1].strip())
            person.sale = True
            person.save()
            bot.send_message(person.p_id,'”®—Ç“Ø–Ω–º”©“£“Ø–∑ –∂–∞–∫—Ç—ã—Ä—ã–ª–¥—ã.–¢–æ–ø–∫–æ –∫–æ—à—É–ª—É—É “Ø—á“Ø–Ω —à–∏–ª—Ç–µ–º–µ–Ω–∏ –±–∞—Å—ã“£—ã–∑ :'+links[person.doljnost])

            bot.send_message(message.chat.id, "–ë–∞—Ä–¥—ã–∫ –æ–∫—É—è–ª–∞—Ä–¥–∞–Ω –∫–∞–±–∞—Ä–¥–∞—Ä –±–æ–ª—É–ø —Ç—É—Ä—É—É “Ø—á“Ø–Ω –±–∏–∑–¥–∏–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ã–±—ã–∑–≥–∞ ”©—Ç“Ø“£“Ø–∑"
            , reply_markup=gen_kanal())
            
        elif call.data == 'no':
            person = People.objects.get(p_id=call.message.text.split("ID:",1)[1].strip())
            bot.send_message(person.p_id,'”®—Ç“Ø–Ω–º”©“£“Ø–∑ —á–µ—Ç–∫–µ –∫–∞–≥—ã–ª–¥—ã.–¢–æ–ª—Ç—É—Ä—É–ø –∂–∞—Ç–∫–∞–Ω–¥–∞ —Ç—É—É—Ä–∞ —ç–º–µ—Å –º–∞–∞–ª—ã–º–∞—Ç—Ç–∞—Ä–¥—ã –∫–∏—Ä–≥–∏–∑–≥–µ–Ω–¥–∏—Ä—Å–∏–∑.')
            person.delete()

        elif call.data == 'doc':
            try:
                msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏')
                chat_id = call.message.chat.id
                distribut_dict[chat_id] = Distribution(call.data)
                bot.register_next_step_handler(msg,add_text)
            except Exception as e:
                print("Excelent")
                print(e)
                
        elif call.data == 'img':
            msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏')
            distribut_dict[call.message.chat.id] = Distribution(call.data)
            bot.register_next_step_handler(msg,add_text)
        elif call.data == 'text':
            msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏')
            distribut_dict[call.message.chat.id] = Distribution(call.data)
            bot.register_next_step_handler(msg,add_text)
    except Exception as e:
        print(e)

# Enable saving next step handlers to file "./.handlers-saves/step.save".
# Delay=2 means that after any change in next step handlers (e.g. calling register_next_step_handler())
# saving will hapen after delay 2 seconds.
bot.enable_save_next_step_handlers(delay=2)

# Load next_step_handlers from save file (default "./.handlers-saves/step.save")
# WARNING It will work only if enable_save_next_step_handlers was called!
bot.load_next_step_handlers()

